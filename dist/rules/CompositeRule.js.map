{"version":3,"file":"CompositeRule.js","sourceRoot":"","sources":["../../src/app/rules/CompositeRule.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AACxC,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;;;;;AAMxC;;;;AAAA;IAAmC,iCAAU;IAKzC;;;;;OAKG;IACH,uBAAY,IAAY,EAAE,OAAe,EAAE,aAAsB;QAAjE,YACI,kBAAM,IAAI,EAAE,OAAO,EAAE,aAAa,CAAC,SACtC;0BAZoB,KAAK;wBACG,IAAI,KAAK,EAAc;sBACzB,IAAI,KAAK,EAAc;;KAUjD;IAED,8BAAM,GAAN;QAAA,iBAGC;QAFG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,EAAV,CAAU,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAA9B,CAA8B,CAAC,CAAC;QAC9E,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;KAChC;IAEM,gCAAQ,GAAf;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC;SACf;QACD,MAAM,CAAC,KAAK,CAAC;KAChB;IAED,sCAAc,GAAd;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,OAAO,KAAK,KAAK,CAAC,EAArB,CAAqB,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;SACzB;QACD,MAAM,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;KAC/B;wBAxCL;EAOmC,UAAU,EAkC5C,CAAA;;;;;AAlCD,yBAkCC","sourcesContent":["import {RulePolicy} from './RulePolicy';\r\nimport {RuleResult} from './RuleResult';\r\n\r\n/**\r\n * Use the [CompositeRule] as a base class for a complex rule - a rule that contains\r\n * other rules. \r\n */\r\nexport class CompositeRule extends RulePolicy {\r\n    hasErrors: boolean = false;\r\n    results: Array<RuleResult> = new Array<RuleResult>();\r\n    rules: Array<RulePolicy> = new Array<RulePolicy>();\r\n\r\n    /**\r\n     * \r\n     * @param name The name of the rule. \r\n     * @param message The message to display if the rule is violated.\r\n     * @param isDisplayable Indicates if the rule is displayable.\r\n     */\r\n    constructor(name: string, message: string, isDisplayable: boolean) {\r\n        super(name, message, isDisplayable);\r\n    }\r\n\r\n    render(): RuleResult {\r\n        this.rules.sort(s => s.priority).forEach(r => this.results.push(r.execute()));\r\n        return this.processResults();\r\n    }\r\n\r\n    public hasRules(): boolean {\r\n        if (this.rules && this.rules.length > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    processResults(): RuleResult {\r\n        if (this.results.filter(r => (r.isValid === false)).length > 0) {\r\n            this.isValid = false;\r\n            this.hasErrors = true;\r\n        }\r\n        return new RuleResult(this);\r\n    }\r\n}\r\n"]}