{"version":3,"file":"Range.js","sourceRoot":"","sources":["../../src/app/rules/Range.ts"],"names":[],"mappings":";;;;;;;;;;AAKA,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAC5B,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;;;;;;;;;;;AAY5B;;;;;;;;;;AAAA;IAA2B,yBAAa;IAKpC;;;;;;;;OAQG;IACH,eAAY,IAAY,EAAE,OAAe,EAAE,MAAiB,EAAE,KAAa,EAAE,GAAW,EAAE,aAA8B;QAA9B,8BAAA,EAAA,qBAA8B;QAAxH,YACI,kBAAM,IAAI,EAAE,OAAO,EAAE,aAAa,CAAC,SAYtC;QAXG,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,KAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAEnC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,oBAAoB,CAAC,iBAAiB,EAAE,kCAAkC,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAE9G,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACtB,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,UAAU,EAAE,mEAAmE,EAAE,KAAI,CAAC,MAAM,EAAE,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACnI,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,UAAU,EAAE,8DAA8D,EAAE,KAAI,CAAC,MAAM,EAAE,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SAC/H;;KACJ;gBA/CL;EAoB2B,aAAa,EA4BvC,CAAA;;;;;;;;;;;AA5BD,iBA4BC","sourcesContent":["import {CompareResult} from 'typescript-dotnet-commonjs/System/CompareResult';\r\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\r\n\r\nimport { SimpleRule } from './SimpleRule'; import { RuleResult } from './RuleResult'; import { Primitive } from './Primitive';\r\n\r\nimport { CompositeRule } from './CompositeRule';\r\nimport { IsNotNullOrUndefined } from './IsNotNullOrUndefined';\r\nimport { Min } from './Min';\r\nimport { Max } from './Max';\r\n\r\n/**\r\n * Use this rule to determine if the specified target is within the specified range (start and end) values.\r\n *\r\n * The range values are inclusive.\r\n *\r\n * Ex: 1 is within 1 and 3. The target is valid.\r\n * Ex: 2 is within 1 and 3. The target is valid.\r\n * Ex: 0 is not within 1 and 3. The target is not valid.\r\n * Ex: 4 is not within 1 and 3. The target is not valid.\r\n */\r\nexport class Range extends CompositeRule {\r\n    end: number;\r\n    start: number;\r\n    target: Primitive;\r\n\r\n    /**\r\n     * Constructor for the [Range] rule. \r\n     * @param name: The name of the rule.\r\n     * @param message: A message to display if the rule is violated.\r\n     * @param target: The target object that the rules will be applied to.\r\n     * @param start: The start range value - the lowest allowed boundary value.\r\n     * @param end: The end range value - the highest allowed boundary value.\r\n     * @param isDisplayable: (Optional) Indicates if the rule violation may be displayed or visible to the caller or client. Default is [false].\r\n     */\r\n    constructor(name: string, message: string, target: Primitive, start: number, end: number, isDisplayable: boolean = false) {\r\n        super(name, message, isDisplayable);\r\n        this.target = target;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.isDisplayable = isDisplayable;\r\n\r\n        this.rules.push(new IsNotNullOrUndefined('TargetIsNotNull', 'The target is null or undefined.', this.target));\r\n\r\n        if (this.target != null) {\r\n            this.rules.push(new Min('MinValue', 'The value must be equal to or greater than the start range value.', this.target, this.start));\r\n            this.rules.push(new Max('MaxValue', 'The value must be equal to or less than the end range value.', this.target, this.end));\r\n        }\r\n    }\r\n}\r\n"]}