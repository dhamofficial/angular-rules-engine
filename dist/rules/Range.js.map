{"version":3,"file":"Range.js","sourceRoot":"","sources":["file:///B:/development/npmjs.com/angular-rules-engine/src/rules/Range.ts"],"names":[],"mappings":";;;;;;AAKA,iCAAsC;AAGtC,iCAA6C;AAC7C,iCAA4B;AAC5B,iCAA4B;AAE5B;;;;;;;;;GASG;AACH;IAA2B,yBAAa;IAKpC;;;;;;;;OAQG;IACH,eAAY,IAAY,EAAE,OAAe,EAAE,MAAiB,EAAE,KAAa,EAAE,GAAW,EAAE,aAA8B;QAA9B,8BAAA,EAAA,qBAA8B;QAAxH,YACI,kBAAM,IAAI,EAAE,OAAO,EAAE,aAAa,CAAC,SAYtC;QAXG,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,KAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAEnC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,4BAAoB,CAAC,iBAAiB,EAAE,kCAAkC,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAE9G,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACtB,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,WAAG,CAAC,UAAU,EAAE,mEAAmE,EAAE,KAAI,CAAC,MAAM,EAAE,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACnI,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,WAAG,CAAC,UAAU,EAAE,8DAA8D,EAAE,KAAI,CAAC,MAAM,EAAE,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAChI,CAAC;;IACL,CAAC;IACL,YAAC;AAAD,CAAC,AA5BD,CAA2B,qBAAa,GA4BvC;AA5BY,sBAAK","sourcesContent":["import dCompareResult = require('typescript-dotnet-commonjs/System/CompareResult');\r\nimport CompareResult = dCompareResult.CompareResult;\r\nimport dCompare = require('typescript-dotnet-commonjs/System/Compare');\r\nimport Compare = dCompare;\r\n\r\nimport {CompositeRule} from './index';\r\nimport {RuleResult} from './index';\r\nimport {Primitive} from './index';\r\nimport {IsNotNullOrUndefined} from './index';\r\nimport {Min} from './index';\r\nimport {Max} from './index';\r\n\n/**\r\n * Use this rule to determine if the specified target is within the specified range (start and end) values.\n *\n * The range values are inclusive.\n *\n * Ex: 1 is within 1 and 3. The target is valid.\n * Ex: 2 is within 1 and 3. The target is valid.\n * Ex: 0 is not within 1 and 3. The target is not valid.\n * Ex: 4 is not within 1 and 3. The target is not valid.\r\n */\r\nexport class Range extends CompositeRule {\r\n    end: number;\r\n    start: number;\r\n    target: Primitive;\r\n\n    /**\r\n     * Constructor for the [Range] rule. \r\n     * @param name: The name of the rule.\r\n     * @param message: A message to display if the rule is violated.\r\n     * @param target: The target object that the rules will be applied to.\r\n     * @param start: The start range value - the lowest allowed boundary value.\r\n     * @param end: The end range value - the highest allowed boundary value.\r\n     * @param isDisplayable: Indicates if the rule violation may be displayed or visible to the caller or client.\r\n     */\r\n    constructor(name: string, message: string, target: Primitive, start: number, end: number, isDisplayable: boolean = false) {\r\n        super(name, message, isDisplayable);\r\n        this.target = target;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.isDisplayable = isDisplayable;\r\n\r\n        this.rules.push(new IsNotNullOrUndefined('TargetIsNotNull', 'The target is null or undefined.', this.target));\r\n\r\n        if (this.target != null) {\r\n            this.rules.push(new Min('MinValue', 'The value must be equal to or greater than the start range value.', this.target, this.start));\r\n            this.rules.push(new Max('MaxValue', 'The value must be equal to or less than the end range value.', this.target, this.end));\r\n        }\r\n    }\r\n}\r\n"]}