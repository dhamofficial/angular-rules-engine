{"version":3,"file":"Range.js","sourceRoot":"","sources":["file:///b:/BuildMotionJS/angular-rules-engine/tmp/broccoli_type_script_compiler-input_base_path-TmFTVb7a.tmp/0/src/rules/Range.ts"],"names":[],"mappings":";;;;;;AAKA,sBAA4B,SAAS,CAAC,CAAA;AAGtC,sBAAmC,SAAS,CAAC,CAAA;AAC7C,sBAAkB,SAAS,CAAC,CAAA;AAC5B,sBAAkB,SAAS,CAAC,CAAA;AAE5B;IAA2B,yBAAa;IAKpC,eAAY,IAAY,EAAE,OAAe,EAAE,MAAiB,EAAE,KAAa,EAAE,GAAW;QACpF,kBAAM,IAAI,EAAE,OAAO,CAAC,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAEf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,4BAAoB,CAAC,iBAAiB,EAAE,kCAAkC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAE9G,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,WAAG,CAAC,UAAU,EAAE,mEAAmE,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACnI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,WAAG,CAAC,UAAU,EAAE,8DAA8D,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAChI,CAAC;IACL,CAAC;IACL,YAAC;AAAD,CAAC,AAlBD,CAA2B,qBAAa,GAkBvC;AAlBY,aAAK,QAkBjB,CAAA","sourcesContent":["import dCompareResult = require('typescript-dotnet-commonjs/System/CompareResult');\r\nimport CompareResult = dCompareResult.CompareResult;\r\nimport dCompare = require('typescript-dotnet-commonjs/System/Compare');\r\nimport Compare = dCompare;\r\n\r\nimport {CompositeRule} from './Index';\r\nimport {RuleResult} from './Index';\r\nimport {Primitive} from './Index';\r\nimport {IsNotNullOrUndefined} from './Index';\r\nimport {Min} from './Index';\r\nimport {Max} from './Index';\r\n\r\nexport class Range extends CompositeRule {\r\n    end: number;\r\n    start: number;\r\n    target: Primitive;\r\n\r\n    constructor(name: string, message: string, target: Primitive, start: number, end: number) {\r\n        super(name, message);\r\n        this.target = target;\r\n        this.start = start;\r\n        this.end = end;\r\n\r\n        this.rules.push(new IsNotNullOrUndefined('TargetIsNotNull', 'The target is null or undefined.', this.target));\r\n\r\n        if (this.target != null) {\r\n            this.rules.push(new Min('MinValue', 'The value must be equal to or greater than the start range value.', this.target, this.start));\r\n            this.rules.push(new Max('MaxValue', 'The value must be equal to or less than the end range value.', this.target, this.end));\r\n        }\r\n    }\r\n}\r\n"]}