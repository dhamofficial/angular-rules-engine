{"version":3,"file":"RulePolicy.js","sourceRoot":"","sources":["../../src/app/rules/RulePolicy.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AACxC,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;;;;;AAMpC;;;;AAAA;IAkBI;;;;;;;;OAQG;IACH,oBAAY,IAAY,EAAE,OAAe,EAAE,aAA8B,EAAE,QAAuC,EAAE,QAAoB;QAA7F,8BAAA,EAAA,qBAA8B;QAAE,yBAAA,EAAA,WAAqB,QAAQ,CAAC,SAAS;QAAE,yBAAA,EAAA,YAAoB;uBA1BrH,IAAI;0BAME,UAAU,CAAC,gBAAgB;wBAC/B,QAAQ,CAAC,SAAS;QAoBnC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;IAED,4BAAO,GAAP;QACI,OAAO,CAAC,GAAG,CAAC,iCAAiC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3D,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;KACxB;IAED;;OAEG;;;;IACH,2BAAM;;;IAAN;QACI,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;KACjG;qBAtDL;IAuDC,CAAA;;;;;AA9CD,sBA8CC","sourcesContent":["import {IRuleComponent} from './IRuleComponent';\r\nimport {RuleResult} from './RuleResult';\r\nimport {RenderType} from './RenderType';\r\nimport {Severity} from './Severity';\r\n\r\n/**\r\n * This is the base class for all rules. All rules will extend from this class. New rules\r\n * should extend [SimpleRule] or [CompositeRule] - these rule abstractions extend [RulePolicy].\r\n */\r\nexport class RulePolicy implements IRuleComponent {\r\n    isValid: boolean = true;\r\n    message: string;\r\n    name: string;\r\n    priority: number;\r\n    result: RuleResult;\r\n    isDisplayable: boolean;\r\n    renderType: RenderType = RenderType.EvaluateAllRules;\r\n    severity: Severity = Severity.Exception;\r\n    source: string;\r\n\r\n    /**\r\n     * Overloaded constructor for the [RulePolicy] class.\r\n     * @param name: The name of the rule.\r\n     * @param message: The message to display when the rule is violated.\r\n     * @param isDisplayable: Indicates if the rule violation is displayble.\r\n     */\r\n    constructor(name: string, message: string, isDisplayable: boolean);\r\n    /**\r\n     * Overloaded constructor for the [RulePolicy] class.\r\n     * @param name: The name of the rule.\r\n     * @param name: The name of the rule.\r\n     * @param message: The message to display when the rule is violated.\r\n     * @param isDisplayable: Indicates if the rule violation is displayble.\r\n     * @param severity (Optional) Use to indicate the rule violation severity. Default is [Exception].\r\n     * @param priority (Optional) Use to indciate the rule's evaluation priority. Higher numeric values are priority. 0 is default and lowest priority.\r\n     */\r\n    constructor(name: string, message: string, isDisplayable: boolean = false, severity: Severity = Severity.Exception, priority: number = 0) {\r\n        this.name = name;\r\n        this.message = message;\r\n        this.isDisplayable = isDisplayable;\r\n        this.priority = priority;\r\n        this.severity = severity;\r\n    }\r\n\r\n    execute(): RuleResult {\r\n        console.log('Begin execution of RulePolicy: ' + this.name);\r\n        return this.render();\r\n    }\r\n\r\n    /**\r\n     * Each rule must implement this function and return a valid [RuleResult].\r\n     */\r\n    render(): RuleResult {\r\n        throw new Error('Each concrete rule must implement this function and return a valid Result.');\r\n    }\r\n}\r\n"]}