{"version":3,"file":"StringIsNotNullEmptyRange.js","sourceRoot":"","sources":["file:///b:/BuildMotionJS/angular-rules-engine/tmp/broccoli_type_script_compiler-input_base_path-TmFTVb7a.tmp/0/src/rules/StringIsNotNullEmptyRange.ts"],"names":[],"mappings":";;;;;;AAKA,sBAA4B,SAAS,CAAC,CAAA;AAGtC,sBAAmC,SAAS,CAAC,CAAA;AAC7C,sBAAoB,SAAS,CAAC,CAAA;AAE9B;;;GAGG;AACH;IAA+C,6CAAa;IAKxD;;;;;;;OAOG;IACH,mCAAY,IAAY,EAAE,OAAe,EAAE,MAAiB,EAAE,SAAiB,EAAE,SAAiB,EAAE,aAA8B;QAA9B,6BAA8B,GAA9B,qBAA8B;QAC9H,kBAAM,IAAI,EAAE,OAAO,CAAC,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAE3B,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,kDAAc,GAAd;QACI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,4BAAoB,CAAC,iBAAiB,EAAE,yCAAyC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACrH,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,2BAA2B,EAAE,qDAAqD,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAClL,CAAC;IACL,CAAC;IACL,gCAAC;AAAD,CAAC,AA/BD,CAA+C,qBAAa,GA+B3D;AA/BY,iCAAyB,4BA+BrC,CAAA","sourcesContent":["import dCompareResult = require('typescript-dotnet-commonjs/System/CompareResult');\r\nimport CompareResult = dCompareResult.CompareResult;\r\nimport dCompare = require('typescript-dotnet-commonjs/System/Compare');\r\nimport Compare = dCompare;\r\n\r\nimport {CompositeRule} from './Index';\r\nimport {RuleResult} from './Index';\r\nimport {Primitive} from './Index';\r\nimport {IsNotNullOrUndefined} from './Index';\r\nimport {Range} from './Index';\r\n\r\n/**\r\n * Use this rule to validate a string target. A valid string is not null or undefined; and it\r\n * is within the specified minimum and maxiumum length. \r\n */\r\nexport class StringIsNotNullEmptyRange extends CompositeRule {\r\n    maxLength: number;\r\n    minLength: number;\r\n    target: Primitive;\r\n\r\n    /**\r\n     * The constructor for the [StringIsNotNullEmptyRangeRule].\r\n     * @param name: The name of the rule.\r\n     * @param message: The message to display when the rule is violated.\r\n     * @param target: The target that the rule(s) will be evaluated against.\r\n     * @param minLength: The minimum allowed length of the target value.\r\n     * @param maxLength: The maximum allowed length of the target value.\r\n     */\r\n    constructor(name: string, message: string, target: Primitive, minLength: number, maxLength: number, isDisplayable: boolean = false) {\r\n        super(name, message);\r\n        this.target = target;\r\n        this.minLength = minLength;\r\n        this.maxLength = maxLength;\r\n\r\n        this.configureRules();\r\n    }\r\n\r\n    /**\r\n     * A helper method to configure/add rules to the validation context. \r\n     */\r\n    configureRules() {\r\n        this.rules.push(new IsNotNullOrUndefined('StringIsNotNull', 'The string target is null or undefined.', this.target));\r\n        if (this.target != null) {\r\n            this.rules.push(new Range('TargetLengselfWithinRange', 'The string value is not within the specified range.', this.target.toString().length, this.minLength, this.maxLength));\r\n        }\r\n    }\r\n}\r\n"]}