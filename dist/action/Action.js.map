{"version":3,"file":"Action.js","sourceRoot":"","sources":["file:///b:/buildmotion/angular-rules-engine/src/action/Action.ts"],"names":[],"mappings":"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","sourcesContent":["import {ValidationContext} from '../validation/index';\nimport {ValidationContextState} from '../validation/index';\nimport {IAction} from './IAction';\nimport { ActionResult } from './index';\n\n/**\r\n * This is the framework Action class that provides the pipeline of pre/post\r\n * execution methods. This class implements the [Template Method] pattern.\r\n *\r\n * The pre-execute functions that can be implemented are:\r\n *\t\t1. start();\n *\t\t2. audit();\n *\t\t3. preValidateAction();\n *\t\t4. evaluateRules();\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction(); \r\n * \r\n * The post-execution functions that can be implemented are:\r\n *\t\t1. postExecuteAction();\n *\t\t2. validateActionResult();\n *\t\t3. finish();\n */ \nexport class Action implements IAction {\n    allowExecution = true;\n    _validationContext: ValidationContext = new ValidationContext();\n    actionResult: ActionResult = ActionResult.Unknown;\n\n    constructor() {}\n\n    get validationContext(): ValidationContext {\n        return this._validationContext;\n    }\n\n\t/**\r\n\t * Use this method to execute a concrete action. A concrete action must implement\r\n\t * the [processAction] and the [validateActionResult] functions to be a valid\r\n\t * action. \r\n\t */\n    execute() {\n        console.log('Preparing to execute action.');\n        this.processActionPipeline();\n    }\n\n    private processActionPipeline() {\n        this.startAction();\n        if (this.allowExecution) {\n            this.processAction();\n        }\n        this.finishAction();\n    };\n\n    private startAction() {\n        console.log('Starting action.');\n        this.start();\n        this.audit();\n        this.preValidateAction();\n        this.evaluateRules();\n        this.postValidateAction();\n        this.preExecuteAction();\n    }\n\n    private finishAction() {\n        console.log('Finishing action.');\n        this.postExecuteAction();\n        this.validateActionResult();\n        this.finish();\n    }\n\n\t\n    private processAction() {\n        console.log('Processing action.');\n        this.performAction();\n    }\n\n\t/**\r\n\t * All action must implement this function. This is where your\r\n\t * [business logic] should be implemented. This function is called if\r\n\t * there are no validation rule exceptions.\r\n\t */\n    performAction() {\n        throw new Error('Not implemented. Requires implementation in concrete action.');\n    }\n\n\t/**\r\n\t * Override/Implement this function to perform an early operation in the action pipeline.\r\n\t * This function belongs to the pre-execute functions of the action pipeline.\r\n\t */\n    start() {\n        console.log('Starting action.');\n    }\n\n\t/**\r\n\t * Implement this function to perform any auditing features during the pre-exectuion of the\r\n\t * business logic.\r\n\t */\n    audit() {\n        console.log('Auditing action.');\n    }\n\n\t/**\r\n\t * Use this function to setup any validation rules before the validation happens. This\r\n\t * function is called before [evaluateRules].\r\n\t */\n    preValidateAction() {\n        console.log('Pre-validating action.');\n    }\n\n\t/**\r\n\t * Use this function to implement the execution of the validation and business rules. This\r\n\t * function is called after [preValidateAction].\r\n\t */\n    evaluateRules(){\n        console.log('Evaluating action rules.');\n        let context = this.validateAction();\n        if (context.isValid) {\n            this.allowExecution = true;\n            this.validationContext.state = ValidationContextState.Success;\n        } else {\n            this.allowExecution = false;\n            this.validationContext.state = ValidationContextState.Failure;\n        }\n    }\n\n\t/**\r\n\t * Use to determine or handle the results of the rule evalation. This\r\n\t * function is called after the [evaluateRules].\r\n\t */\n    postValidateAction() {\n        console.log('Post-Validation of action.');\n    }\n\n\t/**\r\n\t * Use this function to perform any setup before the action is executed. \r\n\t */\n    preExecuteAction() {\n        console.log('Pre-execution of action.');\n    }\n\n\t/**\r\n\t * Use this funciton to evaluate the action after the the business logic within\r\n\t * the [performAction] has executed.\r\n\t */\n    postExecuteAction() {\n        console.log('Post-execution of action');\n    }\n\n\t/**\r\n\t * This function requires implementation to determin the state and result of the action.\r\n\t * Use this opportunity to validate the results. \r\n\t */\n    validateActionResult(): ActionResult {\n        throw new Error('Concrete actions required to implement this method.');\n    }\n\n\t/**\r\n\t * Use this function to perform any cleanup, logging, or disposing of resources used\r\n\t * by the action. This is the last function called during the pipeline.\r\n\t */\n    finish() {\n        console.log('Finish action.');\n    }\n\n\t/**\r\n\t * Implement this function to perform validation of business rules and data.\r\n\t */\n    validateAction() {\n        console.log('Validating the action.');\n        return this.validationContext;\n    }\n}\n"]}