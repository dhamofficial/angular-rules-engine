{"version":3,"file":"ServiceContext.js","sourceRoot":"","sources":["file:///b:/BuildMotionJS/angular-rules-engine/tmp/broccoli_type_script_compiler-input_base_path-yE7YdqtA.tmp/0/src/service/ServiceContext.ts"],"names":[],"mappings":";AACA,sBAA4B,SAAS,CAAC,CAAA;AAEtC;;;;GAIG;AACH;IASI;QAPA;;;WAGG;QACH,aAAQ,GAA0B,IAAI,KAAK,EAAkB,CAAC;QAC9D,kBAAa,GAA0B,IAAI,KAAK,EAAkB,CAAC;IAErD,CAAC;IAEf;;OAEG;IACH,mCAAU,GAAV,UAAW,OAAuB;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,kCAAS,GAAT;QACI,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC;YAC1C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,KAAK,mBAAW,CAAC,KAAK,EAAnC,CAAmC,CAAC,CAAC;YACpF,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,+BAAM,GAAN;QACI,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC;YAC1C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,KAAK,mBAAW,CAAC,KAAK,EAAnC,CAAmC,CAAC,CAAC;YACpF,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACL,qBAAC;AAAD,CAAC,AA3CD,IA2CC;AA3CY,sBAAc,iBA2C1B,CAAA","sourcesContent":["import { ServiceMessage } from './Index';\r\nimport { MessageType } from './Index';\r\n\r\n/**\r\n * Use this class to manage the context of a single service call. This \r\n * class will contain a list of any service messages added during the processing\r\n * of a service request. \r\n */\r\nexport class ServiceContext{\r\n\r\n    /**\r\n     * A list of service messages added by the application during the processing of the \r\n     * specified service request. \r\n     */\r\n    Messages: Array<ServiceMessage> = new Array<ServiceMessage>();\r\n    ErrorMessages: Array<ServiceMessage> = new Array<ServiceMessage>();\r\n\r\n    constructor(){}\r\n\r\n    /**\r\n     * Use this method to add a new message to the [ServiceContext].\r\n     */\r\n    addMessage(message: ServiceMessage){\r\n        this.Messages.push(message);\r\n    }\r\n\r\n    /**\r\n     * Use to determine if the current [ServiceContext] contains any messages with type of [Error].\r\n     */\r\n    hasErrors() : boolean{\r\n        if(this.Messages && this.Messages.length > 0){\r\n            this.ErrorMessages = this.Messages.filter(f => f.MessageType === MessageType.Error);\r\n            if (this.ErrorMessages.length > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    /**\r\n     * Use to determine if the current [ServiceContext] does not contain any errors.\r\n     */\r\n    isGood() : boolean{\r\n        if(this.Messages && this.Messages.length > 0){\r\n            this.ErrorMessages = this.Messages.filter(f => f.MessageType === MessageType.Error);\r\n            if (this.ErrorMessages.length > 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}"]}