{"version":3,"file":"ServiceContext.js","sourceRoot":"","sources":["file:///B:/development/angular-rules-engine/src/service/ServiceContext.ts"],"names":[],"mappings":";AACA,sBAA4B,SAAS,CAAC,CAAA;AAEtC;;;;GAIG;AACH;IASI;QAPA;;;WAGG;QACH,aAAQ,GAA0B,IAAI,KAAK,EAAkB,CAAC;QAC9D,kBAAa,GAA0B,IAAI,KAAK,EAAkB,CAAC;IAErD,CAAC;IAEf;;OAEG;IACH,mCAAU,GAAV,UAAW,OAAuB;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,kCAAS,GAAT;QACI,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC;YAC1C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,KAAK,mBAAW,CAAC,KAAK,EAAnC,CAAmC,CAAC,CAAC;YACpF,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,+BAAM,GAAN;QACI,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC;YAC1C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,KAAK,mBAAW,CAAC,KAAK,EAAnC,CAAmC,CAAC,CAAC;YACpF,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACL,qBAAC;AAAD,CAAC,AA3CD,IA2CC;AA3CY,sBAAc,iBA2C1B,CAAA","sourcesContent":["import { ServiceMessage } from './index';\nimport { MessageType } from './index';\n\n/**\n * Use this class to manage the context of a single service call. This \n * class will contain a list of any service messages added during the processing\n * of a service request. \n */\nexport class ServiceContext{\n\n    /**\n     * A list of service messages added by the application during the processing of the \n     * specified service request. \n     */\n    Messages: Array<ServiceMessage> = new Array<ServiceMessage>();\n    ErrorMessages: Array<ServiceMessage> = new Array<ServiceMessage>();\n\n    constructor(){}\n\n    /**\n     * Use this method to add a new message to the [ServiceContext].\n     */\n    addMessage(message: ServiceMessage){\n        this.Messages.push(message);\n    }\n\n    /**\n     * Use to determine if the current [ServiceContext] contains any messages with type of [Error].\n     */\n    hasErrors() : boolean{\n        if(this.Messages && this.Messages.length > 0){\n            this.ErrorMessages = this.Messages.filter(f => f.MessageType === MessageType.Error);\n            if (this.ErrorMessages.length > 0) {\n                return true;\n            }\n        }\n        return false; \n    }\n\n    /**\n     * Use to determine if the current [ServiceContext] does not contain any errors.\n     */\n    isGood() : boolean{\n        if(this.Messages && this.Messages.length > 0){\n            this.ErrorMessages = this.Messages.filter(f => f.MessageType === MessageType.Error);\n            if (this.ErrorMessages.length > 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"]}