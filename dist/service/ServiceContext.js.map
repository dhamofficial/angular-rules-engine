{"version":3,"file":"ServiceContext.js","sourceRoot":"","sources":["../../src/app/service/ServiceContext.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;;;;;;AAO5C;;;;;AAAA;IAQI;;;;;wBAFkC,IAAI,KAAK,EAAkB;KAE9C;IAEf;;OAEG;;;;IACH,mCAAU;;;IAAV,UAAW,OAAuB;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC/B;IAED;;OAEG;;;;IACH,kCAAS;;;IAAT;QACI,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC;YAC1C,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,KAAK,EAAnC,CAAmC,CAAC,CAAC;YACrF,EAAE,CAAC,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC;aACf;SACJ;QACD,MAAM,CAAC,KAAK,CAAC;KAChB;IAED;;OAEG;;;;IACH,+BAAM;;;IAAN;QACI,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC;YAC1C,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,KAAK,EAAnC,CAAmC,CAAC,CAAC;YACrF,EAAE,CAAC,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,KAAK,CAAC;aAChB;SACJ;QACD,MAAM,CAAC,IAAI,CAAC;KACf;yBAjDL;IAkDC,CAAA;;;;;;AA1CD,0BA0CC","sourcesContent":["import { ServiceMessage } from './ServiceMessage';\r\nimport { MessageType } from './MessageType';\r\n\r\n/**\r\n * Use this class to manage the context of a single service call. This \r\n * class will contain a list of any service messages added during the processing\r\n * of a service request. \r\n */\r\nexport class ServiceContext{\r\n\r\n    /**\r\n     * A list of service messages added by the application during the processing of the \r\n     * specified service request. \r\n     */\r\n    Messages: Array<ServiceMessage> = new Array<ServiceMessage>();\r\n    \r\n    constructor(){}\r\n\r\n    /**\r\n     * Use this method to add a new message to the [ServiceContext].\r\n     */\r\n    addMessage(message: ServiceMessage){\r\n        this.Messages.push(message);\r\n    }\r\n\r\n    /**\r\n     * Use to determine if the current [ServiceContext] contains any messages with type of [Error].\r\n     */\r\n    hasErrors() : boolean{\r\n        if(this.Messages && this.Messages.length > 0){\r\n            const errorMessages = this.Messages.filter(f => f.MessageType === MessageType.Error);\r\n            if (errorMessages.length > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    /**\r\n     * Use to determine if the current [ServiceContext] does not contain any errors.\r\n     */\r\n    isGood() : boolean{\r\n        if(this.Messages && this.Messages.length > 0){\r\n            const errorMessages = this.Messages.filter(f => f.MessageType === MessageType.Error);\r\n            if (errorMessages.length > 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}"]}