{"version":3,"file":"ValidatonContextBase.js","sourceRoot":"","sources":["file:///B:/BuildMotionJS/angular-rules-engine/tmp/broccoli_type_script_compiler-input_base_path-8lnXYL7m.tmp/0/src/validation/ValidatonContextBase.ts"],"names":[],"mappings":";AACA,sBAAqC,SAAS,CAAC,CAAA;AAI/C;IAAA;QACC,UAAK,GAA2B,8BAAsB,CAAC,YAAY,CAAC;QACpE,YAAO,GAAsB,IAAI,KAAK,EAAc,CAAC;QAClD,UAAK,GAAsB,IAAI,KAAK,EAAc,CAAC;IA+DvD,CAAC;IA5DA;;OAEG;IACA,sCAAO,GAAP,UAAQ,IAAgB;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC9B,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAEE;;;OAGG;IACH,yCAAU,GAAV,UAAW,MAAc;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,0CAAW,GAAX;QAAA,iBAOF;QANA,IAAI,CAAC,OAAO,GAAG,IAAI,KAAK,EAAc,CAAC;QACvC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,EAAV,CAAU,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAA9B,CAA8B,CAAC,CAAC;QAC9E,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAEE;;OAEG;IACN,gDAAiB,GAAjB;QACC,IAAI,aAAa,GAAG,KAAK,CAAC;QAC1B,EAAE,CAAA,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC;YACd,IAAI,mBAAmB,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,KAAK,KAAK,EAAnB,CAAmB,CAAC,CAAC,MAAM,CAAC;YAC3F,EAAE,CAAC,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,aAAa,GAAG,IAAI,CAAC;YACtB,CAAC;QACF,CAAC;QACD,MAAM,CAAC,aAAa,CAAC;IACtB,CAAC;IAMD,sBAAI,yCAAO;QAJR;;;WAGG;aACN;YACC,IAAI,WAAW,GAAY,IAAI,CAAC;YAChC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChB,IAAI,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,KAAK,KAAK,EAAnB,CAAmB,CAAC,CAAC,MAAM,CAAC;gBAC3E,EAAE,CAAC,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC3B,WAAW,GAAG,KAAK,CAAC;gBACrB,CAAC;YACF,CAAC;YACD,MAAM,CAAC,WAAW,CAAC;QACpB,CAAC;;;OAAA;IACF,2BAAC;AAAD,CAAC,AAlED,IAkEC;AAlEY,4BAAoB,uBAkEhC,CAAA","sourcesContent":["import {IValidationContext} from './index';\r\nimport {ValidationContextState} from './index';\r\nimport {RuleResult} from '../rules/index';\r\nimport {RulePolicy} from '../rules/index';\r\n\r\nexport class ValidatonContextBase implements IValidationContext {\r\n\tstate: ValidationContextState = ValidationContextState.NotEvaluated;\r\n\tresults: Array<RuleResult> = new Array<RuleResult>();\r\n    rules: Array<RulePolicy> = new Array<RulePolicy>();\r\n    source: string;\r\n\r\n\t/**\r\n\t * Use this method to add a new rule to the ValidationContext. \r\n\t */\r\n    addRule(rule: RulePolicy) {\r\n        if (this.source) {\r\n            rule.source = this.source;\r\n        }\r\n        this.rules.push(rule);\r\n\t\treturn this;\r\n\t}\r\n\r\n    /**\r\n     * Use this extension method to set the [Source] for the current validation context.\r\n     * @param source\r\n     */\r\n    withSource(source: string) {\r\n        this.source = source;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Use this method to execute the rules added to the [ValidationContext].\r\n     */\r\n    renderRules(): ValidatonContextBase {\r\n\t\tthis.results = new Array<RuleResult>();\r\n\t\tif (this.rules && this.rules.length < 1) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tthis.rules.sort(r => r.priority).forEach(r => this.results.push(r.execute()));\r\n\t\treturn this;\r\n\t}\r\n\r\n    /**\r\n     * Use to determine if the validation context has any rule violations.\r\n     */\r\n\thasRuleViolations(): boolean {\r\n\t\tlet hasViolations = false;\r\n\t\tif(this.rules){\r\n\t\t\tlet ruleViolationsCount = this.rules && this.rules.filter(r => r.isValid === false).length;\r\n\t\t\tif (ruleViolationsCount > 0) {\r\n\t\t\t\thasViolations = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn hasViolations;\r\n\t}\r\n\r\n    /**\r\n     * *Use to indicate if the validation context is valid - no rule violations.\r\n     * @returns {}: returns a boolean.\r\n     */\r\n\tget isValid(): boolean {\r\n\t\tvar isRuleValid: boolean = true;\r\n\t\tif (this.rules) {\r\n\t\t\tvar invalidRulesCount = this.rules.filter(r => r.isValid === false).length;\r\n\t\t\tif (invalidRulesCount > 0) {\r\n\t\t\t\tisRuleValid = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn isRuleValid;\r\n\t}\r\n}\r\n"]}