{"version":3,"file":"ServiceMessage.js","sourceRoot":"","sources":["file:///c:/users/matt/documents/visual studio 2015/Projects/angular-rules-engine/angular-rules-engine/src/service/ServiceMessage.ts"],"names":[],"mappings":";AAEA;;GAEG;AACH;IAmBI,wBAAY,IAAY,EAAE,OAAe,EAAE,WAAyB,EAAE,MAAe,EAAE,aAAuB;QAE1G,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACvC,CAAC;IAGD,uFAAuF;IACvF,wHAAwH;IAExH,GAAG;IAEH;;;OAGG;IACH,iCAAQ,GAAR,UAAS,IAAY;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,oCAAW,GAAX,UAAY,OAAe;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,wCAAe,GAAf,UAAgB,WAAwB;QACpC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,mCAAU,GAAV,UAAW,MAAc;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,0CAAiB,GAAjB,UAAkB,aAAsB;QACpC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,iCAAQ,GAAR;QACI,MAAM,CAAC,WAAS,IAAI,CAAC,IAAI,mBAAc,IAAI,CAAC,OAAO,uBAAkB,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,kBAAa,IAAI,CAAC,MAAM,yBAAoB,IAAI,CAAC,aAAe,CAAC;IACrK,CAAC;IACL,qBAAC;AAAD,CAAC,AArFD,IAqFC;AArFY,sBAAc,iBAqF1B,CAAA","sourcesContent":["import { MessageType } from './index';\n\n/**\n * Use this class to create a message for the current [ServiceContext].\n */\nexport class ServiceMessage{\n\n    Name: string;\n    Message: string;\n    MessageType: MessageType;\n    Source: string;\n    DisplayToUser: boolean;\n\n    /**\n     * The constructor for the [ServiceMessage]. \n     * @param name: The name of the message.\n     * @param message: The display text of the message.\n     * @param messageType: Indicates the type of message.\n     * @param source: Indicates the source of the message.\n     * @param displayToUser: Indicates if the message is displayable.\n     */ \n    constructor(name: string, message?: string)\n    constructor(name: string, message: string, messageType?: MessageType)\n    constructor(name: string, message: string, messageType?: MessageType, source?: string)\n    constructor(name: string, message: string, messageType?: MessageType, source?: string, displayToUser?: boolean)\n    {\n        this.Name = name;\n        this.Message = message;\n        this.MessageType = messageType;\n        this.Source = source;\n        this.DisplayToUser = displayToUser;        \n    }\n\n\n    //constructor(name: string, message: string, messageType: MessageType, source?: string)\n    //constructor(name: string, message: string, messageType: MessageType, source: string, displayToUser: boolean = false) {\n\n    //}\n\n    /**\n     * Use this extension method to add the name of the message.\n     * @param name: The name of the service message.\n     */\n    WithName(name: string) {\n        this.Name = name;\n        return this;\n    }\n\n    /**\n     * Use this extension method to add the message text to the ServiceMessage item.\n     * @param message: The display text of the service message.\n     */\n    WithMessage(message: string) {\n        this.Message = message;\n        return this;\n    }\n\n    /**\n     * Use this extension method to set the [MessageType] of the ServiceMessage item.\n     * @param messageType: Use to indicate the message type.\n     */\n    WithMessageType(messageType: MessageType) {\n        this.MessageType = messageType;\n        return this;\n    }\n\n    /**\n     * Use this extension method to set the [Source] of the ServiceMessage item.\n     * @param source: Use to indicate the source of the message.\n     */\n    WithSource(source: string) {\n        this.Source = source;\n        return this;\n    }\n\n    /**\n     * Use this extension method to set the [DisplayToUser] indicator of the ServiceMessage.\n     * @param displayToUser: A boolean value to indicate if the message can be displayed to the user.\n     */\n    WithDisplayToUser(displayToUser: boolean) {\n        this.DisplayToUser = displayToUser;\n        return this;\n    }\n\n    /**\n     * Use this method return a string representing the ServiceMessage.\n     */\n    toString() {\n        return `Name: ${this.Name}; Message: ${this.Message}; MessageType: ${this.MessageType.toString()}; Source: ${this.Source}; DisplayToUser: ${this.DisplayToUser}`;\n    }\n}"]}