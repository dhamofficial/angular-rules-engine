{"version":3,"file":"Range.js","sourceRoot":"","sources":["file:///c:/users/matt/documents/visual studio 2015/Projects/angular-rules-engine/angular-rules-engine/src/rules/Range.ts"],"names":[],"mappings":";;;;;;AAKA,sBAA4B,SAAS,CAAC,CAAA;AAGtC,sBAAmC,SAAS,CAAC,CAAA;AAC7C,sBAAkB,SAAS,CAAC,CAAA;AAC5B,sBAAkB,SAAS,CAAC,CAAA;AAE5B;IAA2B,yBAAa;IAKpC,eAAY,IAAY,EAAE,OAAe,EAAE,MAAiB,EAAE,KAAa,EAAE,GAAW,EAAE,aAA8B;QAA9B,6BAA8B,GAA9B,qBAA8B;QACpH,kBAAM,IAAI,EAAE,OAAO,CAAC,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAEnC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,4BAAoB,CAAC,iBAAiB,EAAE,kCAAkC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAE9G,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,WAAG,CAAC,UAAU,EAAE,mEAAmE,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACnI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,WAAG,CAAC,UAAU,EAAE,8DAA8D,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAChI,CAAC;IACL,CAAC;IACL,YAAC;AAAD,CAAC,AAnBD,CAA2B,qBAAa,GAmBvC;AAnBY,aAAK,QAmBjB,CAAA","sourcesContent":["import dCompareResult = require('typescript-dotnet-commonjs/System/CompareResult');\nimport CompareResult = dCompareResult.CompareResult;\nimport dCompare = require('typescript-dotnet-commonjs/System/Compare');\nimport Compare = dCompare;\n\nimport {CompositeRule} from './index';\nimport {RuleResult} from './index';\nimport {Primitive} from './index';\nimport {IsNotNullOrUndefined} from './index';\nimport {Min} from './index';\nimport {Max} from './index';\n\nexport class Range extends CompositeRule {\n    end: number;\n    start: number;\n    target: Primitive;\n\n    constructor(name: string, message: string, target: Primitive, start: number, end: number, isDisplayable: boolean = false) {\n        super(name, message);\n        this.target = target;\n        this.start = start;\n        this.end = end;\n        this.isDisplayable = isDisplayable;\n\n        this.rules.push(new IsNotNullOrUndefined('TargetIsNotNull', 'The target is null or undefined.', this.target));\n\n        if (this.target != null) {\n            this.rules.push(new Min('MinValue', 'The value must be equal to or greater than the start range value.', this.target, this.start));\n            this.rules.push(new Max('MaxValue', 'The value must be equal to or less than the end range value.', this.target, this.end));\n        }\n    }\n}\n"]}